from django.db import models


class MetaClass(type):
    def __new__(cls, name, bases, attrs):
        for attr_name, attr_value in attrs.items():
            if not attr_name.startswith("__"):
                attrs[attr_name] = AttributeDescriptor(attr_name, attr_value)
        return super().__new__(cls, name, bases, attrs)


class MetaClassButton(type):
    def __new__(cls, name, bases, attrs):
        for attr_name, attr_value in attrs.items():
            if not attr_name.startswith("__"):
                attrs[attr_name] = AttributeDescriptorButton(attr_name, attr_value)
        return super().__new__(cls, name, bases, attrs)


class AttributeDescriptor:
    def __init__(self, name, value):
        self.name = name
        self.value = value

    def __get__(self, instance, owner):
        if instance is None:
            return self.value

        if Text.objects.filter(title=self.name).exists():
            return Text.objects.get(title=self.name).text
        else:
            new_text = Text(title=self.name, text=self.value)
            new_text.save()
            return new_text.text


class AttributeDescriptorButton:
    def __init__(self, name, value):
        self.name = name
        self.value = value

    def __get__(self, instance, owner):
        if instance is None:
            return self.value

        if ButtonText.objects.filter(title=self.name).exists():
            return ButtonText.objects.get(title=self.name).text
        else:
            new_text = ButtonText(title=self.name, text=self.value)
            new_text.save()
            return new_text.text


class ButtonTexts(metaclass=MetaClassButton):
    conditions = "–£—Å–ª–æ–≤–∏—è"
    instructions = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"


class Texts(metaclass=MetaClass):
    start = "{code_text}–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ —Å–µ—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ ‚Äú–ì–∞–º–±—Ä–∏–Ω—É—Å‚Äù üçª –∏ —Å—Ç–µ–π–∫-—Ö–∞—É—Å–∞ ‚ÄúBlack Angus‚Äù ü•© . –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–∞ 3 000—Ä. –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—à–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:"
    user_error_message = (
        "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –∫–∞–∂–µ—Ç—å—Å—è —á—Ç–æ—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
    )
    disabled_for_new_users = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    code_not_found = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"
    unique_code_not_found = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –∫–æ–¥—ã —É–∂–µ —Ä–∞–∑–æ–±—Ä–∞–Ω—ã, —Å–∫–æ—Ä–æ –º—ã –∑–∞–≥—Ä—É–∑–∏–º –Ω–æ–≤—ã–µ"
    same_code_too_early = (
        "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3–µ—Ö –¥–Ω–µ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
    )
    code_successfully_gotten = (
        "–ü—Ä–∏–Ω—è—Ç–æüî•! –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: {code}\n–ß—Ç–æ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å, —á–∏—Ç–∞–π—Ç–µ –Ω–∏–∂–µ"
    )


text_choices = [attr for attr in dir(Texts) if not attr.startswith("__")]
button_text_choices = [attr for attr in dir(ButtonTexts) if not attr.startswith("__")]


texts = Texts()
button_texts = ButtonTexts()


class Text(models.Model):
    class Meta:
        db_table = "text_table"

    title = models.CharField(
        max_length=255,
        choices=[(choice, choice) for choice in text_choices],
        unique=True,
        null=False,
        blank=False,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ",
    )

    text = models.TextField(
        max_length=5000,
        null=False,
        blank=False,
        verbose_name="–¢–µ–∫—Å—Ç",
    )

    class Meta:
        verbose_name = "–¢–µ–∫—Å—Ç"
        verbose_name_plural = "–¢–µ–∫—Å—Ç—ã"


class ButtonText(models.Model):
    class Meta:
        db_table = "button_text_table"

    title = models.CharField(
        max_length=255,
        choices=[(choice, choice) for choice in button_text_choices],
        unique=True,
        null=False,
        blank=False,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ",
    )

    text = models.TextField(
        max_length=5000,
        null=False,
        blank=False,
        verbose_name="–¢–µ–∫—Å—Ç",
    )

    class Meta:
        verbose_name = "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏"
        verbose_name_plural = "–¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫"
